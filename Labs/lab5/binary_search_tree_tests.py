import unittest
from binary_search_tree import *


class TestLab4(unittest.TestCase):

    def test_simple(self):
        bst = BinarySearchTree()
        self.assertTrue(bst.is_empty())
        bst.insert(10, 'stuff')
        self.assertTrue(bst.search(10))
        self.assertEqual(bst.find_min(), (10, 'stuff'))
        bst.insert(10, 'other')
        self.assertEqual(bst.find_max(), (10, 'other'))
        self.assertEqual(bst.tree_height(), 0)
        self.assertEqual(bst.inorder_list(), [10])
        self.assertEqual(bst.preorder_list(), [10])
        self.assertTrue(bst.delete(10))
        self.assertEqual(bst.tree_height(), None)

    def test_simple_2(self):
        tree = BinarySearchTree()
        tree.insert(12, 69)
        tree.insert(7, 69)
        tree.insert(18, 69)
        tree.insert(2, 69)
        tree.insert(10, 69)
        tree.insert(14, 69)
        tree.insert(23, 69)
        tree.insert(8, 69)
        tree.insert(9, 69)
        self.assertTrue(tree.search(8))
        self.assertFalse(tree.search(99))
        self.assertEqual(tree.find_min(), (2, 69))
        self.assertEqual(tree.find_max(), (23, 69))
        self.assertEqual(tree.inorder_list(), [2, 7, 8, 9, 10, 12, 14, 18, 23])
        self.assertEqual(tree.preorder_list(), [12, 7, 2, 10, 8, 9, 18, 14, 23])
        self.assertEqual(tree.tree_height(), 4)

    def test_simple_3(self):
        tree = BinarySearchTree()
        tree.insert(12, 69)
        self.assertTrue(tree.search(12))
        self.assertEqual(tree.find_min(), (12, 69))
        self.assertEqual(tree.find_max(), (12, 69))
        self.assertEqual(tree.inorder_list(), [12])
        self.assertEqual(tree.preorder_list(), [12])
        self.assertEqual(tree.tree_height(), 0)

    def test_simple_4(self):
        tree = BinarySearchTree()
        tree.insert(1, 69)
        tree.insert(2, 68)
        self.assertTrue(tree.delete(1))
        tree.insert(12, 69)
        tree.insert(7, 69)
        tree.insert(18, 69)
        tree.insert(2, 69)
        self.assertTrue(tree.search(2))
        tree.insert(10, 69)
        tree.insert(14, 69)
        tree.insert(23, 69)
        self.assertTrue(tree.search(23))
        tree.insert(8, 69)
        tree.insert(9, 69)
        self.assertFalse(tree.search(9.5))
        self.assertTrue(tree.delete(2))
        self.assertTrue(tree.delete(9))

    def test_simple_5(self):
        tree = BinarySearchTree()
        self.assertFalse(tree.search(10))
        tree.insert(12, 69)
        tree.insert(7, 69)
        self.assertTrue(tree.search(12))
        self.assertTrue(tree.delete(12))
        self.assertTrue(tree.delete(7))
        self.assertTrue(tree.is_empty())
        self.assertEqual(tree.inorder_list(), [])
        self.assertEqual(tree.preorder_list(), [])
        tree.insert(12, 69)
        tree.insert(7, 69)
        tree.insert(18, 69)
        tree.insert(23, 69)
        self.assertEqual(tree.find_min(), (7, 69))
        self.assertTrue(tree.delete(18))
        self.assertTrue(tree.delete(7))

    def test_simple_6(self):
        tree = BinarySearchTree()
        tree.insert(12, 69)
        tree.insert(18, 69)
        self.assertTrue(tree.delete(12))
        self.assertTrue(tree.delete(18))
        self.assertTrue(tree.is_empty())

    def test_simple_7(self):
        tree = BinarySearchTree()
        tree.insert(12, 69)
        tree.insert(18, 69)
        tree.insert(23, 69)
        tree.insert(24, 69)
        self.assertTrue(tree.delete(12))
        self.assertTrue(tree.delete(18))
        self.assertTrue(tree.delete(23))
        self.assertTrue(tree.delete(24))
        self.assertTrue(tree.is_empty())
        self.assertEqual(tree.find_min(), None)
        self.assertEqual(tree.find_max(), None)

    def test_simple_8(self):
        tree = BinarySearchTree()
        tree.insert(12, 69)
        tree.insert(7, 69)
        tree.insert(2, 69)
        tree.insert(3, 69)
        self.assertTrue(tree.delete(12))
        self.assertTrue(tree.delete(7))
        self.assertTrue(tree.delete(2))
        self.assertTrue(tree.delete(3))
        self.assertTrue(tree.is_empty())

    def test_simple_9(self):
        tree = BinarySearchTree()
        tree.insert(12, 69)
        tree.insert(7, 69)
        tree.insert(18, 69)
        tree.insert(2, 69)
        tree.insert(10, 69)
        tree.insert(14, 69)
        tree.insert(23, 69)
        tree.insert(8, 69)
        self.assertTrue(tree.delete(10))
        self.assertFalse(tree.delete(11))

    def test_simple_10(self):
        tree = BinarySearchTree()
        tree.insert(12, 69)
        tree.insert(7, 69)
        tree.insert(18, 69)
        tree.insert(2, 69)
        tree.insert(10, 69)
        tree.insert(14, 69)
        tree.insert(23, 69)
        tree.insert(8, 69)
        tree.insert(9, 69)
        self.assertTrue(tree.delete(7))

    def test_simple_11(self):
        tree = BinarySearchTree()
        tree.insert(12, 69)
        tree.insert(7, 69)
        tree.insert(18, 69)
        tree.insert(2, 69)
        tree.insert(10, 69)
        tree.insert(14, 69)
        tree.insert(23, 69)
        tree.insert(8, 69)
        tree.insert(9, 69)
        self.assertTrue(tree.delete(18))


if __name__ == '__main__': 
    unittest.main()
